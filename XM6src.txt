------------------------------------------------------------------------------

  X68000 EMULATOR XM6 (version 2.05)

  ソースコード
  for Win32
  Copyright (C) 2001-2006 ＰＩ．

------------------------------------------------------------------------------
□ソース公開にあたって

  このアーカイブはX68000エミュレータXM6(version 2.05)の全ソースコードです。

  XM6はversion 1.95まで、すべてソース非公開としてきました。これは全体の方向性
  が決まり、重要な部分が出来上がるまでは、非公開とした方が私にとってメリット
  があると判断したためです。

  2005年になりversion 2.00に至って、ようやく全体としての完成形が見えてきた、
  細かな設計も、一部を除きフィックスした、そう考えるようになり、ソースコード
  を公開できる状態になってきました。

  X68000は名著「Inside X68000」をはじめとして、比較的テクニカルな資料が揃い易
  い機種だといえます。しかし現在は2006年、すなわち1987年のX68000初代発売以来
  実に19年が経過し、前述のInsideは勿論の事、各デバイスのデータシートなど次々
  と入手不能となっており、ゆっくりと、しかし確実に情報が失われつつあります。

  このソースコードが少しでも、X68000のハードウェア研究・アプリケーション開発
  の一助になれば幸いです。また、新たにエミュレータ開発を試みる方にとっても
  参考資料の一つになることと思います。


□使用規定（ライセンス）

  アーカイブに含まれるファイル群は、一部の例外(後述)を除きＰＩ．が著作権を保有
  しています。

  ソースファイルの一部、もしくは全部を再利用する場合は、次の規則に基づくもの
  とします。

  ・vmディレクトリ下のファイルを再利用する場合は、ドキュメントにオリジナルの
    著作権表示を明記してください。また商用利用は禁止します。
  ・それ以外の部分の再利用は自由です。ただし前項同様、商用利用は禁止します。

  このアーカイブの再配布はできません。無断転載を禁じます。


□使用規定に含まれない例外

  以下に示すファイルは68000エミュレータ"Starscream"を改変したものです。
  オリジナルの著作権者はNeill Corlett氏です。(neill@neillcorlett.com)
  この部分については前述の規定は適用されません。Starscreamのライセンス
  規定に従います。

  cpu\star.c
  vm\cpudebug.c
  vm\cpudebug.h

  以下に示すファイルはFM音源エミュレータ"fmgen"を改変したものです。
  オリジナルの著作権者はcisc氏です(cisc@retropc.net)
  この部分については前述の規定は適用されません。fmgenのライセンス規定に
  従います。

  vm\fmgen.cpp
  vm\fmgen.h
  vm\fmgeninl.h
  vm\fmtimer.cpp
  vm\fmtimer.h
  vm\opm.cpp
  vm\opm.h

  以下に示すファイルはco氏の作です。(cogood@gmail.com)
  ただし、現在は暫定組み込みということもあり、XM6本体と一体として扱って
  います。

  vm\windrv.cpp
  vm\windrv.h
  mfc\mfc_host.cpp
  mfc\mfc_host.h


□開発環境

  コンパイラとして、Microsoft Visual C++ .NET 2003が必要です。VC++.NET 2003
  に含まれる、MFC 7.1をアプリケーションフレームワークとして使用しています。

  また、前バージョンであるVisual C++ 6や、後継バージョンであるVisual C++
  .NET 2005でも構築可能な模様です。ただし、作者の環境では確認していません。

  アセンブラとして、NASM(Netwide Assembler)が必要です。無償配布されています
  ので別途入手してください。バージョン0.98.39のWin32版を推奨します。
  (参考URL:http://sourceforge.net/projects/nasm/)


□ディレクトリ

  以下のようなディレクトリ構成になっています。

  cpu           CPUコア(Starscream)
  vm            仮想X68000
  mfc           I/O部(Win32)
  res           Win32リソース
  00vcproj.vc6  Visual C++ 6 向けプロジェクト
  00vcproj.vc7  Visual C++ .NET 2003 向けプロジェクト


□定義済みシンボル

  以下のシンボルを全体で使っています。

  _DEBUG     デバッグビルドします。assertによる自己診断を行います。
  NDEBUG     リリースビルドします。通常はこちらを定義します。
  _WIN32     Win32を宣言します。(コンパイラにより自動定義されます)

  以下のシンボルはxm6.h内で宣言されています。

  FALSE      0
  TRUE       (!FALSE)
  NULL       0
  ASSERT     _DEBUG定義時に、assertを有効にします。
  FASTCALL   レジスタ関数呼び出し規約を使います。


□ビルド

   けんじょさんの好意により、VC++6、VC++.NET向けのプロジェクトファイルを
   用意できました。

   Visual C++ 6または.NETを起動し、XM6.dsw(VC++6)またはXM6.sln(VC++.NET)
   をロードします。

   アクティブな構成として"Release"、"Debug"のどちらかを選び、ビルド(B)→
   ソリューションのビルド(B)を選択します。

   コンパイル及びリンクが行われ、ReleaseまたはDebugディレクトリにXM6.exeが
   生成されます。これでビルドは完了です。

   なお、VC++.NETでReleaseビルドの場合、C++ソースに対応する.asmファイルが
   作成されます。これは、このようなプロジェクト設定となっているためです。


□ソースコード ガイド

  XM6のアーキテクチャ、プログラム構造を簡単に説明します。

  XM6はVMと呼ぶ仮想X68000部と、実際のI/Oエミュレーションを担当するWin32部の
  2つに分離されています。この2つは特徴を明確に分けており、VMは仮想マシンを
  論理的、抽象的に記述したもの、Win32部はVMを駆動し、Windows側のデバイスと
  接続するもの、という位置づけになります。またこの中間の橋渡しとなるものと
  して、ファイルI/O・ファイルパスがあり、特性上OSに依存するこの2つの概念を
  抽象化し、VMから隠蔽しています。もう一つ、スレッド間の同期オブジェクトも
  OS依存となるため、ラッパーとしてSyncクラスを設けています。


  上の理由から、VM部はプロセッサやOSによらない、汎用的な記述を心がけていま
  す。ただし、CPUコアであるStarscreamがx86(IA-32)専用であることや、高速化の
  ため頻繁に呼ばれる部分をアセンブラ化していることから、他のコンパイラやプ
  ロセッサ、OSへ移植を行う際は、特にcpu,memory,scheduleの3ファイルについて
  何らかの書き直しが必要です。

  VM上に実装された各デバイスは、Deviceクラス、またはMemDeviceクラスから派生
  させたクラスとなっています。これらの実体(インスタンス)はVMクラスが所有し
  ており、各デバイスはVM::SearchDeviceにより検索、取得が可能です。

  以下、VM部の各ファイル一覧を示します。

  ファイル名(一部拡張子省略)     内  容
  -------------------------------------------------------------------------
    os.h                         OS依存includeヘッダ
    xm6.h                        XM6共通定義
    adpcm                        ADPCM
    areaset                      エリアセット
    cisc.h                       fmgen接続ヘッダ
    config.h                     設定データ定義
    core_asm                     アセンブラ化サブルーチン
    cpu                          MPU
    cpudebug                     逆アセンブラ(Starscream付属版を改造)
    crtc                         CRTコントローラ
    device                       デバイス・メモリマップドデバイス共通
    disk                         SASI・SCSIディスクイメージファイル
    dmac                         DMAコントローラ
    event                        コールバックイベント
    fdc                          フロッピーディスクコントローラ
    fdd                          フロッピーディスクドライブ
    fdi                          フロッピーディスクイメージファイル
    fileio                       ファイルI/O (※Win32専用)
    filepath                     ファイルパス (※Win32専用)
    fmgen                        FM音源ジェネレータ(fmgen)
    fmgeninl                     FM音源ジェネレータ(fmgen)
    fmtimer                      FM音源タイマ(fmgen)(※実質未使用)
    gvram                        グラフィックVRAM
    iosc                         I/Oコントローラ
    keyboard                     キーボード
    log                          ログ
    memory                       メモリ全般・メモリマッピング
    mercury                      Mercury-Unit
    mfp                          MFP
    midi                         MIDI
    mouse                        マウス
    neptune                      Neptune-X
    opm                          YM2151(fmgen)
    opmif                        FM音源
    ppi                          パラレルポート・ジョイスティックデバイス
    printer                      プリンタ
    render                       レンダラ(画面合成)
    renderin                     レンダラ インライン部
    rend_asm                     レンダラ アセンブラ部
    rtc                          リアルタイムクロック
    sasi                         SASIコントローラ
    scc                          シリアルコミュニケーション
    schedule                     スケジューラ
    scsi                         SCSIコントローラ
    sprite                       BG/スプライトコントローラ
    sram                         バッテリーバックアップSRAM
    starcpu.h                    Starscream接続
    sync                         スレッド同期オブジェクト (※Win32専用)
    sysport                      システムポート
    tvram                        テキストVRAM
    vc                           ビデオコントローラ
    vm                           仮想マシン本体
    windrv                       WindrvXM (WINDRV)

  このバージョンでは、Mercury・Neptuneの各クラスはダミー実装となっています。
  これらは今後実装する予定です。またCRTC・GVRAM・Spriteも拡張予定があります。


  Win32部はMFC(Microsoft Foundation Classlibrary)をアプリケーションフレーム
  ワークとして使用しています。ドキュメントやドキュメントテンプレートは使用
  していませんが、かなりMFCに依存した作りになっているため、他の環境への移植
  は困難です。VMの駆動例として参考にして、新しく作り直した方がよいと思いま
  す。また、一部ソースコード解析から得た、未公開仕様を使っている部分があり
  ます。

  Win32上で動作する各モジュールは、一部を除きCComponentクラスから派生された
  クラスになっています。これらの実体(インスタンス)は双方向リンクで接続され
  ているため、各コンポーネントはCComponent::SearchComponentにより検索、取得
  が可能です。

  以下、Win32部の各ファイル一覧を示します。

  ファイル名(一部拡張子省略)     内  容
  -------------------------------------------------------------------------
    mfc.h                        Win32部共通定義
    mfc_app                      アプリケーション及びグローバル
    mfc_asm                      アセンブラ化サブルーチン
    mfc_cfg                      設定データ管理、オプション設定
    mfc_cmd                      メニューコマンドハンドリング
    mfc_com                      コンポーネント共通
    mfc_cpu                      サブウィンドウ (プロセッサ)
    mfc_dev                      サブウィンドウ (デバイス)
    mfc_draw                     描画ウィンドウ・サブウィンドウ管理
    mfc_frm                      フレームウィンドウ・全体コントロール
    mfc_host                     ホスト ファイルシステム (WindrvXM)
    mfc_info                     ステータス情報集中管理
    mfc_inp                      入力ドライバ
    mfc_midi                     MIDIドライバ
    mfc_port                     シリアルポート･パラレルポートドライバ
    mfc_que                      汎用キュー
    mfc_rend                     サブウィンドウ (レンダラ)
    mfc_res                      リソース
    mfc_sch                      スケジューラ
    mfc_snd                      サウンドドライバ
    mfc_stat                     ステータスビュー(全画面時のみ使用)
    mfc_sub                      サブウィンドウ共通
    mfc_sys                      サブウィンドウ (システム)
    mfc_tkey                     TrueKey
    mfc_tool                     ディスクイメージ作成ほか
    mfc_ver                      バージョン情報
    mfc_vid                      サブウィンドウ (ビデオ)
    mfc_w32                      サブウィンドウ (Win32)


  実際の初期化動作としては、次の手順になります。この部分はプラットフォーム
  依存のため、MFCの知識があればより理解しやすいでしょう。

  (1)CApp::InitInstance()   インスタンス初期化
  (2)CFrmWnd::Init()        フレームウィンドウ作成
  (3)CFrmWnd::OnCreate()    フレームウィンドウ・描画ウィンドウの初期化
                            VMの構築・初期化・リセット
                            コンポーネントの構築・初期化
                            WM_KICKユーザメッセージのポスト
  (4)CFrmWnd::OnKick()      ステータスコードに従った処理
                            メッセージポンプとキャプション・ステータス系処理
  (5)CScheduler::Run()      OnKickでCScheduler::Enable(TRUE)が呼ばれると、VM
                            スレッドが動作。計時しながらvm->Execを呼び出す。


□連絡先

  ホームページ(ＰＩ． Home page)
  http://www.ipc-tokai.or.jp/~ytanaka/

  公式掲示板
  http://cgi.ipc-tokai.or.jp/~ytanaka/cgi-bin/xm6/hyperbbs.cgi

  メールアドレス
  ytanaka@ipc-tokai.or.jp
